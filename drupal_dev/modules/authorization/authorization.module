<?php

/**
 * @file
 * Contains authorization.module..
 */

use Drupal\Core\Routing\RouteMatchInterface;

define('AUTHORIZATION_PROJECT_TAG', 'authorization');
define('AUTHORIZATION_USER_NOT_FOUND', 101);
define('AUTHORIZATION_USER_NOT_AUTHENTICATED', 102);
define('AUTHORIZATION_MAP_NOT_CONF_FOR_LOGON', 103);
define('AUTHORIZATION_NOT_APPLY_USER_1', 104);
define('AUTHORIZATION_SERVER_CONFIG_NOT_FOUND', 105);
define('AUTHORIZATION_NO_PROVIDERS', 'authorization_no_providers');

/**
 * Implements hook_help().
 */
function authorization_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the authorization module.
    case 'help.page.authorization':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Authorization API connects up providers (for example LDAP) with consumers (for example Organic Groups or Drupal roles).') . '</p>';
      return $output;

    default:
  }
}

/**
 * @rationale: need not be called from hook_user, so this function separated out
 * so it can be called from a batch synchronization process for example
 *
 * @param drupal user object $user
 * @param string $op indicating operation such as query, set, test_query, etc.
 * @param string $profile_id
 * @param string $context
 *
 * @return array of form:
 * $authorizations[<provider_type>][<consumer_type>][<authorization_id>]
 */
function authorization_user_authorizations(&$user, $op = 'query', $profile_id = NULL, $context = NULL) {
  module_load_include('inc', 'authorization', 'authorization');
  if ($profile_id != NULL) {
    list($new_authorizations, $notifications) = _authorization_user_authorizations($user, $op, $profile_id, $context);
  }
  else {
    $profiles = authorization_get_profiles();
    $new_authorizations = [];
    $notifications = [];
    foreach ($profiles as $profile_id) {
      list($new_authorizations_i, $notifications_i) = _authorizations_user_authorizations($user, $op, $profile_id, $context);
      $new_authorizations = $new_authorizations + $new_authorizations_i;
      $notifications = $notifications + $notifications_i;
    }

  }
  return [$new_authorizations, $notifications];
}

/**
 * @param string $profile_id is machine name of profile such as "ldap_to_drupal_role"
 */
function authorization_get_profiles($profile_id = NULL) {
  return \Drupal::entityQuery('authorization_profile')->execute();
}

/**
 * Implements hook_user_login() login operation.
 */
function authorization_user_login($account) {
  list($authorizations, $notifications) = authorization_user_authorizations($account, 'set', NULL, NULL, 'logon');
  if (\Drupal::config('authorization.settings')->get('authorization_message_on')) {
    foreach ($authorizations as $auth) {
      drupal_set_message($auth, 'status', TRUE);
    }
    foreach ($notifications as $note) {
      drupal_set_message($note, 'status', TRUE);
    }
  }
}
